#!/usr/bin/env python3

import sys
from argparse import ArgumentParser

from articulate.parser import parse_string
from articulate.tree import Tree
from articulate.vm import evaluate, DEBUG
from articulate.scope import Scope


# Options
parser = ArgumentParser(usage="articulate")
parser.add_argument('--dis', action="store_true",
    help="print instruction sequence and quit")
parser.add_argument('--tree', action="store_true",
    help="print instruction tree and quit")
parser.add_argument('--debug-vm', action="store_true",
    help="print VM debugging information")
parser.add_argument('source',
    help='source file')

args = parser.parse_args()

if args.debug_vm:
   DEBUG(True) 

with open(args.source, 'r') as f:
    source = f.read()

instructions = parse_string(source, args.source)

if args.dis:
    for instruction in instructions:
        print(instruction)
    sys.exit(0)

tree = Tree(instructions)

if args.tree:
    print(tree.to_pretty())
    sys.exit(0)

#print("START EVALUATE")
scope = Scope()
for instruction in tree.instructions:
    evaluate(instruction, scope)
